pgrouting은 PostGIS 확장기능으로 공간 함수 알고리즘 패키지 extension 입니다.

지원되는 알고리즘은 다음과 같습니다.

	모든 쌍의 최단 경로, 존슨 알고리즘
	모든 쌍의 최단 경로, 플로이드-워셜 알고리즘
	최단 경로 A*
	양방향 Dijkstra 최단 경로
	양방향 A* 최단 경로
	최단 경로 다이크스트라
	주행 거리
	K-최단 경로, 다중 대체 경로
	K-Dijkstra, 일대다 최단 경로
	여행하는 판매원
	회전 제한 최단 경로(TRSP)

PostGIS download
https://support.broadcom.com/group/ecx/downloads

[gpadmin@mdw pkg]$ gppkg install postgis-3.3.2+pivotal.2.build.1-gp7-rhel8-x86_64.gppkg
Detecting network topology:    [==============================================================] [OK]
1 coordinator and 4 segment instances are detected on 3 unique hosts.
Distributing package:          [==============================================================] [OK]
Decoding package:              [==============================================================] [OK]
Verifying package installation:[==============================================================] [OK]
Verifying package integrity:   [==============================================================] [OK]
You are going to install the following packages:
	Install 'postgis@ossv3.3.2+pivotal.2_pv3.3_gpdb7.1'
Continue? [y/N] y
The stdout from the script of the pre-install:                                                 ] 0.0
	libtiff.so.5 (libc6,x86-64) => /lib64/libtiff.so.5


Running pre-install hook:      [==============================================================] [OK]
Allocating disk space:         [==============================================================] [OK]
Install 'postgis':             [==============================================================] [OK]
The stdout from the script of the post-install:                                                ] 0.0
Please run the following commands to enable the PostGIS package:
CREATE EXTENSION postgis;


Running post-install hook:     [==============================================================] [OK]
Result:
	postgis has been successfully installed
Clean Up:                      [==============================================================] [OK]

#extension 생성
psql> create extension postgis;
psql> create extension pgrouting cascade;

#TSP(순회 세일즈맨 문제)
  "도시 목록과 각 도시 쌍 사이의 거리가 주어졌을 때, 각 도시를 정확히 한 번씩만 방문하고 원래 도시로 돌아오는 가장 짧은 경로는 무엇입니까?"
  https://en.wikipedia.org/wiki/Travelling_salesman_problem

# 예제
  미국 29개 도시를 투어하고 싶은데 어떻게 가는것이 좋을지 해당 예제에서는 pgr_TSPeuclidean 알고리즘을 사용하여 최단 순회 경로를 구해 보도록 합니다.

# 방문할 도시명, x , y 죄표를 통한 위치 정보 테이블 생성

  drop table wi29;
  
  create table wi29 (
    id bigint primary key,
    x float,
    y float,
    city_name varchar(20),
    geom geometry
  ) DISTRIBUTED BY (id);

    INSERT INTO wi29 (id, x, y, city_name) VALUES
    (1, 37, 127, '서울'),
    (2, 630, 1660, '로스앤젤레스'),
    (3, 40, 2090, '시카고'),
    (4, 750, 1100, '휴스턴'),
    (5, 750, 2030, '피닉스'),
    (6, 1030, 2070, '필라델피아'),
    (7, 1650, 650, '샌안토니오'),
    (8, 1490, 1630, '샌디에이고'),
    (9, 790, 2260, '댈러스'),
    (10, 710, 1310, '산호세'),
    (11, 840, 550, '오스틴'),
    (12, 1170, 2300, '잭슨빌'),
    (13, 970, 1340, '포트워스'),
    (14, 510, 700, '콜럼버스'),
    (15, 750, 900, '샬럿'),
    (16, 1280, 1200, '샌프란시스코'),
    (17, 230, 590, '인디애나폴리스'),
    (18, 460, 860, '시애틀'),
    (19, 1040, 950, '덴버'),
    (20, 590, 1390, '워싱턴D.C.'),
    (21, 830, 1770, '보스턴'),
    (22, 490, 500, '엘파소'),
    (23, 1840, 1240, '내슈빌'),
    (24, 1260, 1500, '디트로이트'),
    (25, 1280, 790, '오클라호마시티'),
    (26, 490, 2130, '라스베이거스'),
    (27, 1460, 1420, '포틀랜드'),
    (28, 1260, 1910, '멤피스'),
    (29, 360, 1980, '루이빌'),
    (30, 1150, 1760, '뉴욕');

    - chatGPT 를 이용하여 wi29 형식으로 30개국 죄표를 구했습니다. 실제 좌표와 다르더라도 감안해 주시길 바랍니다.

#좌표를 기반으로 그림으로 표현할수 있는 색인 작업
  gpkrtpch=# UPDATE wi29 SET geom = ST_makePoint(x,y); <-- 좌표를 기반으로 그림으로 표현할수 있는 색인 작업
  UPDATE 30

#입력된 좌표정보 및 색인 확인 
  gpkrtpch=# select * from wi29;
   id |  x   |  y   |   city_name    |                    geom
  ----+------+------+----------------+--------------------------------------------
    1 |   37 |  127 | 서울           | 010100000000000000008042400000000000C05F40
   12 | 1170 | 2300 | 잭슨빌         | 010100000000000000004892400000000000F8A140
   15 |  750 |  900 | 샬럿           | 010100000000000000007087400000000000208C40
   20 |  590 | 1390 | 워싱턴D.C.     | 010100000000000000007082400000000000B89540
   23 | 1840 | 1240 | 내슈빌         | 01010000000000000000C09C400000000000609340
    5 |  750 | 2030 | 피닉스         | 010100000000000000007087400000000000B89F40
    6 | 1030 | 2070 | 필라델피아     | 0101000000000000000018904000000000002CA040
   10 |  710 | 1310 | 산호세         | 010100000000000000003086400000000000789440
   11 |  840 |  550 | 오스틴         | 01010000000000000000408A400000000000308140
   13 |  970 | 1340 | 포트워스       | 01010000000000000000508E400000000000F09440
   14 |  510 |  700 | 콜럼버스       | 01010000000000000000E07F400000000000E08540
   21 |  830 | 1770 | 보스턴         | 01010000000000000000F089400000000000A89B40
   25 | 1280 |  790 | 오클라호마시티 | 010100000000000000000094400000000000B08840
    2 |  630 | 1660 | 로스앤젤레스   | 01010000000000000000B083400000000000F09940
    9 |  790 | 2260 | 댈러스         | 01010000000000000000B088400000000000A8A140
   16 | 1280 | 1200 | 샌프란시스코   | 010100000000000000000094400000000000C09240
   17 |  230 |  590 | 인디애나폴리스 | 01010000000000000000C06C400000000000708240
   24 | 1260 | 1500 | 디트로이트     | 01010000000000000000B093400000000000709740
   26 |  490 | 2130 | 라스베이거스   | 01010000000000000000A07E400000000000A4A040
   28 | 1260 | 1910 | 멤피스         | 01010000000000000000B093400000000000D89D40
   30 | 1150 | 1760 | 뉴욕           | 01010000000000000000F891400000000000809B40
    3 |   40 | 2090 | 시카고         | 01010000000000000000004440000000000054A040
    4 |  750 | 1100 | 휴스턴         | 010100000000000000007087400000000000309140
    7 | 1650 |  650 | 샌안토니오     | 01010000000000000000C899400000000000508440
    8 | 1490 | 1630 | 샌디에이고     | 010100000000000000004897400000000000789940
   18 |  460 |  860 | 시애틀         | 01010000000000000000C07C400000000000E08A40
   19 | 1040 |  950 | 덴버           | 010100000000000000004090400000000000B08D40
   22 |  490 |  500 | 엘파소         | 01010000000000000000A07E400000000000407F40
   27 | 1460 | 1420 | 포틀랜드       | 01010000000000000000D096400000000000309640
   29 |  360 | 1980 | 루이빌         | 010100000000000000008076400000000000F09E40
  (30 rows)

# node 별 비용 확인
  gpkrtpch=# SELECT *
  FROM pgr_TSPeuclidean($$SELECT * FROM wi29$$)
  WHERE seq = 31;
  NOTICE:  pgr_TSPeuclidean no longer solving with simulated annaeling
  HINT:  Ignoring annaeling parameters
   seq | node |        cost        |      agg_cost
  -----+------+--------------------+--------------------
    31 |    1 | 501.61539051348893 | 11389.277900752404
  (1 row)

# 모든 노드(이동 경로) 별로 비용 및 최적화 순서 확인
  gpkrtpch=# select * from pgr_TSPeuclidean($$select * from wi29$$);
  NOTICE:  pgr_TSPeuclidean no longer solving with simulated annaeling
  HINT:  Ignoring annaeling parameters
   seq | node |        cost        |      agg_cost
  -----+------+--------------------+--------------------
     1 |    1 |                  0 |                  0
     2 |   14 |  743.0060565029063 |  743.0060565029063
     3 |   18 |  167.6305461424021 |  910.6366026453084
     4 |    3 | 1299.7307413460683 | 2210.3673439913764
     5 |   29 |  338.3784863137726 |  2548.745830305149
     6 |   26 |  198.4943324127921 |  2747.240162717941
     7 |    9 |  326.9556544854363 | 3074.1958172033774
     8 |   12 |   382.099463490856 | 3456.2952806942335
     9 |    6 |  269.2582403567252 |  3725.553521050959
    10 |    5 |   282.842712474619 |  4008.396233525578
    11 |    2 |  388.9730067755345 |  4397.369240301112
    12 |   20 |  272.9468812791236 |  4670.316121580236
    13 |   21 | 449.44410108488466 |  5119.760222665121
    14 |   30 |  320.1562118716424 |  5439.916434536763
    15 |   28 | 186.01075237738274 |  5625.927186914146
    16 |    8 |  362.3534186398688 |  5988.280605554015
    17 |   23 |  524.0229002629561 |  6512.303505816971
    18 |   27 | 420.47592083257274 |  6932.779426649544
    19 |   24 | 215.40659228538016 | 7148.1860189349245
    20 |   16 | 300.66592756745814 |  7448.851946502383
    21 |   13 | 340.14702703389895 | 7788.9989735362815
    22 |   10 | 261.72504656604804 |   8050.72402010233
    23 |    4 |  213.7755832643195 |  8264.499603366648
    24 |   15 |                200 |  8464.499603366648
    25 |   19 | 294.27877939124323 |  8758.778382757891
    26 |   25 | 288.44410203711914 |  9047.222484795011
    27 |    7 | 395.60080889704966 |  9442.823293692061
    28 |   11 |  816.1494961096282 |  10258.97278980169
    29 |   22 |  353.5533905932738 | 10612.526180394963
    30 |   17 | 275.13632984395207 | 10887.662510238915
    31 |    1 | 501.61539051348893 | 11389.277900752404
  (31 rows)
